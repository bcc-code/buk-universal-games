
name: Build and Deploy Directus to Cloud Run

on:
  workflow_dispatch:
  push:
    paths:
        - 'backend/**'
        - '.github/workflows/prod-directus-cloudrun-docker.yml'
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }} 
  GAR_LOCATION: ${{ secrets.PROD_REGISTRY_BASE_URL }} 
  GAR_NAME: ${{ secrets.PROD_REGISTRY_NAME }} 
  SERVICE:  ${{ secrets.PROD_DIRECTUS_SERVICE_NAME }} 
  REGION: ${{ secrets.GOOGLE_REGION }} 
  
# defaults:
#   run:
#     working-directory: backend/Buk.UniversalGames.Api

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

       # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Login to the artifact registry
        shell: bash
        run: |-
          gcloud --quiet auth configure-docker ${{ env.GAR_LOCATION }}


      - name: Pull and push container image to registry
        shell: bash
        run: |-
          docker pull directus/directus:latest
          docker tag directus/directus:latest ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/directus:latest
          docker push ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/directus:latest


      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/directus:latest
          flags: --port=8055

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
